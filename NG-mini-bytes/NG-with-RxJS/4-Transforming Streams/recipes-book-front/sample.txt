
  ngOnInit(): void {
    this.recipeForm.valueChanges
    .subscribe(
       formValue => {
          this.service.saveRecipe(formValue)
            
       }        
    );

 saveRecipe(formValue: Recipe) : Observable<Recipe>   {
 return   this.http.post<Recipe>(`${BASE_PATH}/recipes/save`, formValue);
  }


export class RecipeCreationComponent implements OnInit {
  constructor(private formBuilder: FormBuilder, private 
   service: RecipesService) { }
  recipeForm = this.formBuilder.group({
    id: Math.floor(1000 + Math.random() * 9000),
    title: [''],
    ingredients: [''],
    tags: [''],
    imageUrl: [''],
    cookingTime: [''],
    yield: [''],
    prepTime: [''],
    steps: ['']
  });
  tags = recipeTags.TAGS;
  ngOnInit(): void {
    this.recipeForm.valueChanges
      .subscribe(
        formValue => {
          this.service.saveRecipe(formValue);
        }
      );
  }
}


ngOnInit(): void {
    this.recipeForm.valueChanges
    .subscribe(
       formValue => {
          this.service.saveRecipe(formValue).subscribe(
               result => this.saveSuccess(result),
               errors => this.handleErrors(errors)
           );
       }        
    );



--------------------------------------------

Higher-order mapping operators

--------------------------------------------



 export class RecipeCreationComponent {
  constructor(private formBuilder: FormBuilder, private 
   service: RecipesService) { }
  recipeForm = this.formBuilder.group({
    id: Math.floor(1000 + Math.random() * 9000),
    title: [''],
    ingredients: [''],
    tags: [''],
    imageUrl: [''],
    cookingTime: [''],
    yield: [''],
    prepTime: [''],
    steps: ['']
  });
  tags = recipeTags.TAGS;
  valueChanges$ = this.recipeForm.valueChanges.pipe(
    concatMap(formValue => 
     this.service.saveRecipe(formValue)),
    catchError(errors => of(errors)),
    tap(result=>this.saveSuccess(result))
  );
  saveSuccess(result: any) {
    console.log('Saved successfully');
  }



Learning about other useful higher-order mapping operators

- mergeMap
- switchMap