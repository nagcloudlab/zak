

UI = data + style + behavior
Web UI = HTML + CSS + ( browser APIs + JavaScript)

-----------------------------------------------------
problems / limitations / challenges while working
with browser Apis with plain JavaScript
-----------------------------------------------------

==> browser compatability issues
==> memory issues
==> performance issues
==> code oraganization/re-use issues

-----------------------------------------------------
legacy solutions
-----------------------------------------------------
=> server-side page technology

    -> jsp,asp,php..

    limitations:

    -> on every request, server-side re-construct same page keeping client's state
    -> on every response, browser re-loads whole page
    -> on every response, serving same static resources, n/w bandwidth

-----------------------------------------------------
Modern Solutions:
-----------------------------------------------------

=> using third-party's JavaScript lib / frameworks


1. Jquery


MVC ( Model View Controller) Arch pattern

2. Backbone.js
3. Knockout.js
4. Ember.js
5. Dojo
6. Ext.JS from sencha
7. Angular.js from google-team
....

component based UI

1. React.js from facebook
2. Angular from google-team ( our focus )
3. Vue.js
3. Ember.js 
..


-----------------------------------------------------

- HTML
- CSS
- CSS pre-processors 
- JavaScript / Typescript
- npm, yarn => package manager
- Webpack => Module bundler & loader

-----------------------------------------------------
Angular cli
-----------------------------------------------------


> sudo npm i @angular/cli -g


-----------------------------------------------------
Angular project structure
-----------------------------------------------------


- Module(s)

    1. directive(s)
    2. pipe(s)
    3. service(s)



-----------------------------------------------------
component => html + css + .ts
-----------------------------------------------------

Angular core concepts
----------------------



A. directives

    1. component
    2. structural
    2. attribute/property

B. data-binding

    1. interpolation:
        {{expresion}}
    2. property
        <element prop1="staic-value" [prop2]="expr"/>  
    3. event         
        <element (event-name)="eventHandler($event)"/>   

-----------------------------------------------------

- Component Lifecycle

- Component Content Projection

  e.g

  <div>
    content - text / markup
  </div>


-----------------------------------------------------
Angular ( Level-2 )
-----------------------------------------------------

1. directives

    1. component

        - component communication

            a. input & output
            b. services

            
            
